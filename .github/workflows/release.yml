name: Build and Release Extension

on:
  push:
    branches:
      - main
    paths:
      - 'manifest.json'

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.changed }}
      new_version: ${{ steps.version_check.outputs.new_version }}
      previous_version: ${{ steps.version_check.outputs.previous_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Compare manifest versions
        id: version_check
        run: |
          # Get current version from manifest.json
          CURR_VERSION=$(jq -r '.version' manifest.json)
          echo "Current version: $CURR_VERSION"
          
          # Get previous version from the previous commit
          PREV_VERSION=$(git show HEAD~1:manifest.json | jq -r '.version' 2>/dev/null || echo "0.0.0")
          echo "Previous version: $PREV_VERSION"
          
          # Check if version changed
          if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
            echo "Version changed from $PREV_VERSION to $CURR_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURR_VERSION" >> $GITHUB_OUTPUT
            echo "previous_version=$PREV_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $CURR_VERSION"
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "new_version=$CURR_VERSION" >> $GITHUB_OUTPUT
            echo "previous_version=$PREV_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Check if release already exists
        if: steps.version_check.outputs.changed == 'true'
        id: check_release
        run: |
          VERSION="${{ steps.version_check.outputs.new_version }}"
          if gh release view "v$VERSION" >/dev/null 2>&1; then
            echo "Release v$VERSION already exists"
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release v$VERSION does not exist"
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run build

      - name: Create CRX file
        run: |
          VERSION="${{ needs.check-version.outputs.new_version }}"
          
          # Install crx3 for creating CRX files
          npm install -g crx3
          
          # Create CRX file from the dist directory
          crx3 dist "packed/reNorsk-v$VERSION.crx"
          
          echo "Created: reNorsk-v$VERSION.crx"

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.check-version.outputs.new_version }}"
          PREV_VERSION="${{ needs.check-version.outputs.previous_version }}"
          
          echo "## Changes in v$VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last version tag (if it exists)
          if git tag | grep -q "v$PREV_VERSION"; then
            echo "### Commits since v$PREV_VERSION:" >> CHANGELOG.md
            git log --oneline "v$PREV_VERSION"..HEAD --grep="^(?!Merge)" >> CHANGELOG.md 2>/dev/null || true
          else
            echo "### Recent commits:" >> CHANGELOG.md
            git log --oneline -10 >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "### Installation" >> CHANGELOG.md
          echo "- Download the \`reNorsk-v$VERSION.zip\` file for manual installation" >> CHANGELOG.md
          echo "- Or download the \`reNorsk-v$VERSION.crx\` file for direct installation (may require developer mode)" >> CHANGELOG.md

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.check-version.outputs.new_version }}"
          name: "reNorsk v${{ needs.check-version.outputs.new_version }}"
          body_path: "CHANGELOG.md"
          draft: false
          prerelease: false
          files: |
            packed/reNorsk-v${{ needs.check-version.outputs.new_version }}.zip
            packed/reNorsk-v${{ needs.check-version.outputs.new_version }}.crx
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          VERSION="${{ needs.check-version.outputs.new_version }}"
          echo "ðŸŽ‰ Successfully created release v$VERSION"
          echo "ðŸ“¦ Assets created:"
          ls -la packed/
          echo ""
          echo "ðŸ”— Release URL: ${{ steps.create_release.outputs.html_url }}"
